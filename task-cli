#!/usr/bin/env python3

"""Task Tracking CLI-Programm"""
import datetime
import json
import os
import sys


POSIBLE_STATES = ("todo", "in-progress", "done")
BUFFER = 4


def main():
    """Loading tasks, calling correct update funcion and saving task"""
    # Loading task
    path = os.path.dirname(sys.argv[0]) + r"/tasks.json"
    # Create path and file

    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.decoder.JSONDecodeError):
        data = {
            "lastId": 0,
            "tasks": []
        }

    tasks = data["tasks"]
    last_id = data["lastId"]

    if len(sys.argv) < 2:
        print("Usage: task-cli [option] [additional arguments]")
    elif sys.argv[1] == "add":
        last_id = adding(tasks, last_id)
    elif sys.argv[1] == "rename":
        renaming(tasks)
    elif sys.argv[1] == "delete":
        deleting(tasks)
    elif sys.argv[1] == "mark":
        marking(tasks)
    elif sys.argv[1] == "list":
        listing(tasks)
    elif sys.argv[1] == "reset":
        last_id = reseting(data)
    elif sys.argv[1] == "help":
        helping()
    else:
        print("No valid option. Type task-cli help to see a list of all options")

    data["lastId"] = last_id

    # Saving task
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)


def adding(tasks, last_id):
    """Add a new task"""
    if len(sys.argv) < 3:
        print("Usage: task-cli add [task name]")
        return last_id

    last_id += 1
    current_date = str(datetime.datetime.now())
    tasks.append({
        "id": last_id,
        "description": sys.argv[2],
        "status": "todo",
        "createdAt": current_date,
        "updatedAt": current_date
    })

    print(f"Task added successfully (ID: {last_id})")

    return last_id


def renaming(tasks):
    """Change the name of a task"""
    if len(sys.argv) < 4:
        print("Usage: task-cli rename [index old task] [new task name]")
        return

    index = int(sys.argv[2])
    new_name = sys.argv[3]

    for task in tasks:
        if task["id"] == index:
            task["description"] = new_name
            task["updatedAt"] = str(datetime.datetime.now())
            break


def deleting(tasks):
    """Delete task"""
    if len(sys.argv) < 3:
        print("Usage: task-cli delete [index task to delete]")
        return

    index = int(sys.argv[2])

    for task in tasks:
        if task["id"] == index:
            tasks.remove(task)
            break


def marking(tasks):
    """Set status of task"""
    if len(sys.argv) < 4:
        print("Usage: task-cli mark [index task] [status]")
        return

    index = int(sys.argv[2])
    status = sys.argv[3]

    if status not in POSIBLE_STATES:
        print(f"Not a possible state. Posible states are: {POSIBLE_STATES}")

    for task in tasks:
        if task["id"] == index:
            task["status"] = status
            task["updatedAt"] = str(datetime.datetime.now())
            break


def listing(tasks):
    """List all tasks according to filter given"""
    if len(sys.argv) == 2:
        filter_states = list(POSIBLE_STATES)
    elif sys.argv[2] not in POSIBLE_STATES:
        print(f"Not a possible state. Posible states are: {POSIBLE_STATES}")
        return
    else:
        filter_states = [sys.argv[2]]

    filtered_tasks = []
    for task in tasks:
        if task["status"] in filter_states:
            filtered_tasks.append(task)

    # From hear on only visuals
    max_length_id = 2
    max_length_status = 6
    max_length_description = 11
    for task in filtered_tasks:
        if len(str(task["id"])) > max_length_id:
            max_length_id = len(str(task["id"]))
        if len(task["status"]) > max_length_status:
            max_length_status = len(task["status"])
        if len(task["description"]) > max_length_description:
            max_length_description = len(task["description"])

    dashes_id = "-" * (max_length_id + BUFFER)
    dashes_status = "-" * (max_length_status + BUFFER)
    dashes_description = "-" * (max_length_description + BUFFER)

    space_id = max_length_id + BUFFER
    space_status = max_length_status + BUFFER
    space_description = max_length_description + BUFFER

    seperator_line = f"+{dashes_id}+{dashes_status}+{dashes_description}+"
    # Print start of table head box
    print(seperator_line)
    # Print head items
    print_data_row([
        {
            "id": "ID",
            "description": "Description",
            "status": "Status"
        },
        space_id,
        space_status,
        space_description
    ])
    print(seperator_line)

    # Print every task
    for task in filtered_tasks:
        print_data_row([
            task,
            space_id,
            space_status,
            space_description
        ])

    # If no task is displayed, show an empty row
    if len(filtered_tasks) == 0:
        print(f"|{' ' * space_id}|{' ' * space_status}|{' ' * space_description}|")

    # Print cut-off line
    print(seperator_line)


def helping():
    """Print help message"""
    print("""Usage: task-cli [option]
Stores a list of tasks          

Options:
add     : add a new task by typing  task-cli add [task name]
delete  : delete a task by typing   task-cli delete [task id]
rename  : rename a task by typing   task-cli rename [task id] [new name]
mark    : mark a task by typing     task-cli mark [task id] [status]
list    : show tasks by typing      task-cli list [status]
reset   : reset all task            task-cli reset""")


def print_data_row(data_list):
    """Print one row of data with formating"""
    data = data_list[0]
    space_id = data_list[1]
    space_status = data_list[2]
    space_description = data_list[3]

    buffer_id_front = round((space_id - len(str(data["id"]))) / 2)
    buffer_id_back = space_id - len(str(data["id"])) - buffer_id_front

    buffer_status_front = round((space_status - len(data["status"])) / 2)
    buffer_status_back = space_status - len(data["status"]) - buffer_status_front

    buffer_description_front = round((space_description - len(data["description"])) / 2)
    buffer_description_back = space_description - len(data["description"]) - buffer_description_front

    row_id = f"|{' ' * buffer_id_front}{data['id']}{' ' * buffer_id_back}"
    row_status = f"|{' ' * buffer_status_front}{data['status']}{' ' * buffer_status_back}"
    row_description = f"|{' ' * buffer_description_front}{data['description']}{' ' * buffer_description_back}"

    row = f"{row_id}{row_status}{row_description}|"
    print(row)


def reseting(data):
    """Resets all data"""
    print("Do you realy want do delete all task-data? If yes, type: LET ME PURGE EVERYTHING")
    confirmation = input("")
    if confirmation == "LET ME PURGE EVERYTHING":
        data["tasks"] = []
        return 0

    print("Aborted.")
    return int(data["lastId"])


main()
